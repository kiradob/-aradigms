# Условие
# На вход подается число n
# Задача
# Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n.
# Обоснуйте выбор парадигм.
# Пример вывода:
# 1 * 1 = 1
# 1 * 2 = 2
# 1 * 3 = 3
# 1 * 4 = 4
# 1 * 5 = 5
# 1 * 6 = 6
# ..
# 1 * 9 = 9

def multiplication_table(n: int):
    for i in range(1, n+1):
        for j in range(1, 10):
            print(i, '*', j, '=', i*j, end = '\n')
        print('', end='\n')

multiplication_table(4)


# Функция использует императивный стиль программирования (процедурную парадигму), то есть она содержит циклы и команды для 
# последовательного выполнения определенных действий.

# Внешний цикл for i in range(1, n+1) перебирает числа от 1 до n и для каждого числа выполняет внутренний цикл.
# Внутренний цикл for j in range(1, 10) перебирает числа от 1 до 9 и для каждого числа выводит на экран строку 
# с выражением умножения и результатом.

# Таким образом, код создает таблицу умножения для цифр от 1 до n с помощью двух вложенных циклов.

# Обоснование выбора императивной парадигмы может быть связано с тем, что в данном случае требуется последовательное 
# выполнение действий с использованием циклов для создания таблицы умножения. 
# Императивный стиль позволяет четко описать алгоритм и шаги, которые нужно выполнить.